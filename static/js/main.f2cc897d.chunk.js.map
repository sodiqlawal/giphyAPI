{"version":3,"sources":["Component/Details.js","Component/Home.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","gif","payload","Details","searchTerm","setIndex","id","useRef","useReducer","dispatch","useEffect","url","fetch","then","x","json","y","data","Fragment","className","onClick","map","show","i","key","src","images","downsized","alt","style","color","fontWeight","username","title","rating","source_tld","is_sticker","import_datetime","trending_datetime","Home","inpuRef","useState","index","setShowId","setSearchTerm","console","log","updateId","onSubmit","e","preventDefault","value","placeholder","onChange","target","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2cc897d.chunk.js","sourcesContent":["import React, {useState, useEffect, useReducer, useRef} from 'react'\r\nimport { BrowserRouter as Link } from \"react-router-dom\"\r\nimport './css/Details.css'\r\n\r\nconst DISPLAY = \"DISPLAY\"\r\n\r\nconst api_key= \"deokzgUjxm6QHQdp3H3aca1LSZcCpucc\"\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n    \r\n        case DISPLAY:\r\n          return {\r\n          ...state,\r\n          gif: action.payload\r\n        }\r\n        \r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n\r\nconst Details = ({searchTerm, setIndex, id}) => {\r\n\r\n    const inpuRef = useRef()\r\n    // const [searchTerm, setSearchTerm] = useState(\"sphinx\");\r\n    const [state, dispatch] = useReducer(reducer, { gif: [] })\r\n  \r\n    const {gif} = state\r\n\r\n    useEffect(()=> {\r\n        const url =`https://api.giphy.com/v1/gifs/search?api_key=${api_key}&limit=25&q=${searchTerm}&offset=0&lang=en&id=${id}`;\r\n        \r\n        fetch(url)\r\n            .then(x => x.json())\r\n            .then(y => dispatch({ type: DISPLAY, payload: y.data}))\r\n          },[searchTerm])\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"details-container\">\r\n      {/* start header */}\r\n      <div className=\"header\">\r\n        <div className='logo'>Giphy</div>\r\n        <nav>\r\n          <ul>\r\n            <li onClick={()=>setIndex(0)}>Home</li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      {/* end header */}\r\n\r\n        <div className=\"details-display\">\r\n        {gif.map((show,i)=>\r\n      (  \r\n         <div className=\"details-body\" key={show.id}>\r\n           <img src={show.images.downsized.url} alt=\"gif\"  className=\"details-image\"/>\r\n           <div>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Username: &nbsp; &nbsp;</span>{show.username}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Title: &nbsp; &nbsp;</span>{show.title}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Rating: &nbsp; &nbsp;</span>{show.rating}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Source_tld: &nbsp; &nbsp;</span>{show.source_tld}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Is_sticker: &nbsp; &nbsp;</span>{show.is_sticker}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Import_datetime: &nbsp; &nbsp;</span>{show.import_datetime}</p>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Trending: &nbsp; &nbsp;</span>{show.trending_datetime}</p>\r\n            </div>\r\n          </div>\r\n      ))\r\n      }\r\n      </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Details;\r\n","import React, { useRef, useState, useReducer, useEffect } from \"react\";\r\nimport './css/Home.css'\r\nimport Details from \"./Details\";\r\n\r\nconst api_key= \"deokzgUjxm6QHQdp3H3aca1LSZcCpucc\"\r\n\r\nconst DISPLAY = \"DISPLAY\"\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n  \r\n  \tcase DISPLAY:\r\n    \treturn {\r\n        ...state,\r\n        gif: action.payload\r\n      }\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nconst Home = () => {\r\n  const inpuRef = useRef()\r\n  const [index, setIndex] = useState(0)\r\n  const [showId, setShowId] = useState(\"\")\r\n  const [searchTerm, setSearchTerm] = useState(\"sphinx\");\r\n  const [state, dispatch] = useReducer(reducer, { gif: [] })\r\n\r\n  const {gif} = state\r\n  console.log(gif)\r\n\r\n  \r\n  useEffect(()=> {\r\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=${api_key}&limit=25&q=${searchTerm}&offset=0&lang=en`;\r\n    \r\n    fetch(url)\r\n    \t.then(x => x.json())\r\n    \t.then(y => dispatch({ type: DISPLAY, payload: y.data}))\r\n    },[searchTerm])\r\n    \r\n   const updateId  = id =>{\r\n     setShowId(id)\r\n     console.log(\"id\", id)\r\n   }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {index === 0 ?\r\n      <div className=\"container-fluid\">\r\n\r\n      {/* start header */}\r\n      <div className=\"header\">\r\n        <div className='logo'>Giphy</div>\r\n        <nav>\r\n          <ul>\r\n            <li>Home</li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      {/* end header */}\r\n\r\n      {/* start body  */}\r\n      <div className=\"body\">\r\n        <h1 className=\"body-title\">GIPHY</h1>\r\n        <form onSubmit={e => {\r\n          e.preventDefault();\r\n          setSearchTerm(\"\")\r\n        }}\r\n        >\r\n        \r\n        \r\n        <input type=\"text\" \r\n        value={searchTerm}\r\n        placeholder=\"search for your gif\" \r\n        onChange={e => setSearchTerm(e.target.value)}\r\n        ref={inpuRef}\r\n        className=\"input\"/>\r\n        \r\n        \r\n        <button type=\"submit\" className=\"searchbtn\">SEARCH</button>\r\n        </form>\r\n        <div className=\"gif-display\">\r\n        {gif.map((show,i)=>\r\n      (  \r\n         <div className=\"text-white each-gif\" key={show.id} onClick={()=>{setIndex(1); updateId(show.id);}}>\r\n           <img src={show.images.downsized.url} alt=\"gif\"  className=\"image\"/>\r\n            <p><span style={{color:\"purple\", fontWeight:\"1000\"}}>Username: &nbsp; &nbsp;</span>{show.username}</p>\r\n          </div>\r\n      ))\r\n      }\r\n      </div>\r\n\r\n      </div>\r\n      \r\n      \r\n\r\n      {/* end body */}\r\n\r\n      </div>\r\n      :\r\n     <Details searchTerm={searchTerm} setIndex={setIndex} id={updateId}/>\r\n\r\n}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './Component/Home';\nimport Details from './Component/Details';\nimport './App.css';\n\n\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Home />\n      {/* <Details /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}